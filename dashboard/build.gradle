/*
 * Copyright 2023 zoukang, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.fasterxml.jackson.databind.ObjectMapper

import java.nio.file.Files

buildscript {
    dependencies {
        classpath 'com.fasterxml.jackson.core:jackson-databind:2.15.1'
    }
}

plugins {
    id 'zk.rgw.java-base-conventions'
}

base {
    archivesName = "rgw-dashboard"
}

dependencies {
    implementation project(path: ":http", configuration: "default")
    implementation project(path: ":common", configuration: "default")
    implementation project(path: ":access-log-common", configuration: "default")

    implementation 'org.mongodb:mongodb-driver-reactivestreams'
    implementation 'org.mongodb:bson-record-codec'

    implementation "com.auth0:java-jwt"

    implementation 'com.networknt:json-schema-validator'
}

tasks.register("generateBuiltinPluginsInfo") {
    doLast {
        def plugins = []
        def om = new ObjectMapper()

        def builtinPluginsDir = rootDir.toPath().resolve("plugins").resolve("filter-plugins").toFile()

        for (final def pluginDir in builtinPluginsDir.listFiles()) {
            def pluginPath = pluginDir.toPath()

            def pluginDefJsonPath = pluginPath.resolve("src/main/resources/META-INF/plugin-def.json")
            def pluginConfJsonSchemaPath = pluginPath.resolve("src/main/resources/META-INF/conf-schema.json")
            def pluginConfJsonDefaultPath = pluginPath.resolve("src/main/resources/META-INF/conf-default.json")
            def docMdPath = pluginPath.resolve("src/main/resources/META-INF/doc.md")

            def plugin = [:]

            om.readerForUpdating(plugin).readValue(Files.newInputStream(pluginDefJsonPath))

            plugin.put("jsonSchema", Files.readString(pluginConfJsonSchemaPath))
            plugin.put("jsonDefault", Files.readString(pluginConfJsonDefaultPath))
            plugin.put("mdDoc", Files.readString(docMdPath))

            plugins.add(plugin)
        }

        def builtinPluginsJsonPath = project.projectDir.toPath().resolve("src/main/resources/rgw-builtin-plugins.json")

        if (!Files.exists(builtinPluginsJsonPath.getParent())) {
            Files.createDirectory(builtinPluginsJsonPath.getParent())
        }

        def jsonStr = om.writerWithDefaultPrettyPrinter().writeValueAsString(plugins)

        Files.writeString(builtinPluginsJsonPath, jsonStr)
    }
}


tasks.named("build") {
    dependsOn 'generateBuiltinPluginsInfo'
}
